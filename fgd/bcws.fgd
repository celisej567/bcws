@include "halflife2.fgd"

@mapsize(-16384, 16384)

//terrain morphing SUStem
@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/env_terrainmorph.vmt") sphere(startradius) sphere(goalradius) = env_terrainmorph : 
	"Morphs terrain by pulling vertices along a normal.\n\n" +
	"Place this entity the desired distance from a terrain surface and set ANGLES " +
	"to the normal along which you want to pull the surface's vertices. If you set the INSTANT spawnflag, " +
	"the morph will take place instantly instead of over time.\n"
[
	startradius( integer ) : "Start Radius" : 500 : "Radius of the effect when morphing begins. Only this value is used" +
													"if the effect is flagged to occur instantly."
	goalradius( integer ) : "Goal Radius" : 100 : "Radius of the effect at the end of morphing. The radius of this effect will change from "+
												  "Start Radius to Goal Radius over the duration of this effect. This value is ignored if the effect is flagged to occur instantly."

	duration( integer ) : "Duration" : 3 : "The morph will take place over this period of time (seconds). Ignored if flagged to occur instantly"

	fraction( integer ) : "Displacement Fraction" : 1 : "If set to 1, the terrain surface will be pulled exactly to this entity's position." +
														" If set to 0.5, the surface will be pulled exactly half way to this entity's position. " +
														"If set to 2, the surface will be pulled to an imaginary point twice as far away as this entity. " +
														"(Any Displacement Fraction greater than 1.0 will result in clipping. The surface cannot be pulled beyond " +
														"This entity's position and any vertices attemping will clip to this entity's position. You may use this feature to create mesas.)"

	// Inputs
	input BeginMorph(void) : "Begin Morph"

	spawnflags(flags) =
	[
		1: "Instant" : 0 
	]
]


@PointClass base(Targetname, Parentname, Angles) studio("models/editor/cone_projected_helper.mdl") frustum(lightfov,nearz,farz,lightcolor,-1) = env_projectedtexture : 
	"Projected texture entity."
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
		2  : "Always Update (moving light)"	: 0
	]

	target(target_destination)	: "Target" : : "The entity will rotate to point at this target. Make sure you check the 'Always Update' flag if you set this."	
	
	dontfollowtarget(Choices) : "Don't Follow Target" : 0 : "Prevents this entity from trying to point at its target, if it has one. Intended for when you want to use 'Light Only Target' without the entity trying to point to it." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	lightfov(float)				: "FOV" : "90.0" : "The field of view cone/pyramid at which the texture is projected. Can also be interpreted as 'size'."
	lighthorfov(float)				: "Horizontal FOV" : "0" : "The horizontal FOV value. This allows the projected texture to use rectangular dimensions, but it causes shadow glitches and is usually not preferable unless shadows are disabled. Leave this at 0 if you want to keep this the same as the regular FOV value."
	nearz(float)				: "NearZ" : "4.0" : "Objects closer than this will not receive the light from the projection. (Warning: Hard falloff, model lighting inconsistent)"
	farz(float)					: "FarZ" : "750.0" : "Objects beyond this distance will not receive the light from the projection. The projection fades out as it approaches this distance."	
	
	enableshadows(Choices) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture." =
	[
		0 : "No"
		1 : "Yes"
	]
	shadowquality(Choices) : "Shadow Quality" : 1 : "Quality of shadows." =
	[
		0 : "Low"
		1 : "High"
	]
	shadowatten(float)			: "Shadow Atten" : "0.0" : "The attenuation of the shadows, or how much the shadows should fade into the light of the projected texture, if at all. The player's flashlight uses 0.35 by default, although higher values may be needed for a visible effect."
	shadowfilter(float)			: "Filter Scale" : "0.3" : "Shadow filter size."
	
	lightonlytarget(Choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightworld(Choices) : "Light World" : 1 : "Control whether flashlight effects static world geometry." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	brightnessscale(float)		: "Brightness Scale" : "1.0" : "The light color's brightness scale."	

	lightcolor(color255)		: "Light Color" : "255 255 255 200" : "The color of the projected texture. Format is RGB-Intensity, like a light entity. Intensity can only range from 0 to 255, so use the Brightness Scale keyvalue to make the projected texture brighter than 255."
	colortransitiontime(float)	: "Color Transition Time" : "0" : "Amount of time it takes for a color or brightness change to occur. 0 = instant"
	constant_attn(string)	: "Constant" : "0" : "The light's constant attenuation, giving the light no falloff. (This value is internally corrected with x*0.5)"
	linear_attn(string)	: "Linear" : "1" : "The light's linear attenuation, giving the light linear decline. This is the most common attenuation for projected textures. (This value is internally corrected with x*100)"
	quadratic_attn(string)	: "Quadratic" : "0" : "The light's quadratic attenuation, giving the light exponentially decreasing falloff. (This value is internally corrected with x*10000)"
	
	
	
	cameraspace(Choices)		: "Camera Space" : 0 : "Angles are interpreted as being relative to camera." =
	[
		0 : "No"
		1 : "Yes"
	]

	texturename(material) : "Texture Name" : "effects/flashlight001" : "The texture which should be used. Please note that env_projectedtexture uses .vtf files directly and does not use .vmt files. The material browser is only available here to assist with finding textures since materials typically have the same name as their textures."
	textureframe(integer) : "Texture Frame" : 0 : "Sets the frame of the projected texture. Only relevant if the texture is animated/has multiple frames."
	
	alwaysdraw(Choices)		: "Always Draw" : 0 : "Always draws the projected texture, regardless of whether the player can see its frustum. Use this for projected textures that can be seen on monitors or in the skybox." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	ProjectedTextureVersion(integer)	readonly	: "Projected Texture Version"      : 1  : "(Don't change). Differentiates between projected textures built before/outside of Mapbase and projected textures using new features."

	// Inputs
	input TurnOn(void)		: "Turns on the texture"
	input TurnOff(void)		: "Turns off the texture"
	input AlwaysUpdateOn(void)	: "Turns on per frame updating (for moving lights)"
	input AlwaysUpdateOff(void)	: "Turns off per frame updating (for moving lights)"
	input FOV(float)		: "Sets the FOV."
	input VerFOV(float)		: "Sets the vertical FOV."
	input HorFOV(float)		: "Sets the horizontal FOV."
	input SpotlightTexture(string)		: "Sets the spotlight texture"
	input SetSpotlightFrame(string)		: "Sets the spotlight texture frame"
	input EnableShadows(bool)		: "Set the if shadows are enabled"
	input LightColor(color255)		: "Change the light color"
	input SetBrightness(float)		: "Sets brightness."
	input SetColorTransitionTime(float)		: "Sets the color transition time."
	input SetConstant(float)		: "Sets the constant attenuation."
	input SetLinear(float)		: "Sets the linear attenuation."
	input SetQuadratic(float)		: "Sets the quadratic attenuation."
	input SetShadowAtten(float)		: "Sets the shadow attenuation."
	input SetFilter(float)			: "Sets filter size"
	input SetNearZ(float)		: "Sets NearZ."
	input SetFarZ(float)		: "Sets FarZ."
	input AlwaysDrawOn(void)	: "Turns off BBox culling (for skybox or monitor lights)"
	input AlwaysDrawOff(void)	: "Turns on BBox culling if it was off before"
	input StopFollowingTarget(void)	: "Causes this entity to stop following the target, if it has one"
	input StartFollowingTarget(void)	: "Causes this entity to start following the target if it was set to not follow it before"
]

@PointClass base(Weapon) studio("models/weapons/w_meatgun.mdl") = weapon_meatgun : "Meatgun" []

@include "csm.fgd"